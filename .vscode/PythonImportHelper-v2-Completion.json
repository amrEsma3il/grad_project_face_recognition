[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "load_model",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "load_model",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "load_model",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "load_model",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "MaxPooling2D",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dropout",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "MaxPooling2D",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dropout",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "to_categorical",
        "importPath": "tensorflow.keras.utils",
        "description": "tensorflow.keras.utils",
        "isExtraImport": true,
        "detail": "tensorflow.keras.utils",
        "documentation": {}
    },
    {
        "label": "to_categorical",
        "importPath": "tensorflow.keras.utils",
        "description": "tensorflow.keras.utils",
        "isExtraImport": true,
        "detail": "tensorflow.keras.utils",
        "documentation": {}
    },
    {
        "label": "ModelCheckpoint",
        "importPath": "tensorflow.keras.callbacks",
        "description": "tensorflow.keras.callbacks",
        "isExtraImport": true,
        "detail": "tensorflow.keras.callbacks",
        "documentation": {}
    },
    {
        "label": "ModelCheckpoint",
        "importPath": "tensorflow.keras.callbacks",
        "description": "tensorflow.keras.callbacks",
        "isExtraImport": true,
        "detail": "tensorflow.keras.callbacks",
        "documentation": {}
    },
    {
        "label": "ImageDataGenerator",
        "importPath": "tensorflow.keras.preprocessing.image",
        "description": "tensorflow.keras.preprocessing.image",
        "isExtraImport": true,
        "detail": "tensorflow.keras.preprocessing.image",
        "documentation": {}
    },
    {
        "label": "ImageDataGenerator",
        "importPath": "tensorflow.keras.preprocessing.image",
        "description": "tensorflow.keras.preprocessing.image",
        "isExtraImport": true,
        "detail": "tensorflow.keras.preprocessing.image",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "classification_report",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "classification_report",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "load_data_from_directory",
        "kind": 2,
        "importPath": "face_recognition.cnn",
        "description": "face_recognition.cnn",
        "peekOfCode": "def load_data_from_directory(directory):\n    images = []\n    labels = []\n    label_map = {}  # Mapping from label (person) to integer ID\n    label_id = 0\n    for label in os.listdir(directory):\n        label_path = os.path.join(directory, label)\n        if os.path.isdir(label_path):\n            label_map[label] = label_id\n            for image_file in os.listdir(label_path):",
        "detail": "face_recognition.cnn",
        "documentation": {}
    },
    {
        "label": "train_dir",
        "kind": 5,
        "importPath": "face_recognition.cnn",
        "description": "face_recognition.cnn",
        "peekOfCode": "train_dir = 'images/train'\ntest_dir = 'images/test'\n# Function to load images and labels from a directory\ndef load_data_from_directory(directory):\n    images = []\n    labels = []\n    label_map = {}  # Mapping from label (person) to integer ID\n    label_id = 0\n    for label in os.listdir(directory):\n        label_path = os.path.join(directory, label)",
        "detail": "face_recognition.cnn",
        "documentation": {}
    },
    {
        "label": "test_dir",
        "kind": 5,
        "importPath": "face_recognition.cnn",
        "description": "face_recognition.cnn",
        "peekOfCode": "test_dir = 'images/test'\n# Function to load images and labels from a directory\ndef load_data_from_directory(directory):\n    images = []\n    labels = []\n    label_map = {}  # Mapping from label (person) to integer ID\n    label_id = 0\n    for label in os.listdir(directory):\n        label_path = os.path.join(directory, label)\n        if os.path.isdir(label_path):",
        "detail": "face_recognition.cnn",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "face_recognition.cnn",
        "description": "face_recognition.cnn",
        "peekOfCode": "X_train = X_train / 255.0\nX_test = X_test / 255.0\n# Convert labels to one-hot encoding\nnum_classes = len(label_map)\nY_train = to_categorical(Y_train, num_classes=num_classes)\nY_test = to_categorical(Y_test, num_classes=num_classes)\n# Data augmentation\ndatagen = ImageDataGenerator(\n    rotation_range=20,\n    width_shift_range=0.1,",
        "detail": "face_recognition.cnn",
        "documentation": {}
    },
    {
        "label": "X_test",
        "kind": 5,
        "importPath": "face_recognition.cnn",
        "description": "face_recognition.cnn",
        "peekOfCode": "X_test = X_test / 255.0\n# Convert labels to one-hot encoding\nnum_classes = len(label_map)\nY_train = to_categorical(Y_train, num_classes=num_classes)\nY_test = to_categorical(Y_test, num_classes=num_classes)\n# Data augmentation\ndatagen = ImageDataGenerator(\n    rotation_range=20,\n    width_shift_range=0.1,\n    height_shift_range=0.1,",
        "detail": "face_recognition.cnn",
        "documentation": {}
    },
    {
        "label": "num_classes",
        "kind": 5,
        "importPath": "face_recognition.cnn",
        "description": "face_recognition.cnn",
        "peekOfCode": "num_classes = len(label_map)\nY_train = to_categorical(Y_train, num_classes=num_classes)\nY_test = to_categorical(Y_test, num_classes=num_classes)\n# Data augmentation\ndatagen = ImageDataGenerator(\n    rotation_range=20,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    shear_range=0.2,\n    zoom_range=0.2,",
        "detail": "face_recognition.cnn",
        "documentation": {}
    },
    {
        "label": "Y_train",
        "kind": 5,
        "importPath": "face_recognition.cnn",
        "description": "face_recognition.cnn",
        "peekOfCode": "Y_train = to_categorical(Y_train, num_classes=num_classes)\nY_test = to_categorical(Y_test, num_classes=num_classes)\n# Data augmentation\ndatagen = ImageDataGenerator(\n    rotation_range=20,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,",
        "detail": "face_recognition.cnn",
        "documentation": {}
    },
    {
        "label": "Y_test",
        "kind": 5,
        "importPath": "face_recognition.cnn",
        "description": "face_recognition.cnn",
        "peekOfCode": "Y_test = to_categorical(Y_test, num_classes=num_classes)\n# Data augmentation\ndatagen = ImageDataGenerator(\n    rotation_range=20,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    fill_mode='nearest'",
        "detail": "face_recognition.cnn",
        "documentation": {}
    },
    {
        "label": "datagen",
        "kind": 5,
        "importPath": "face_recognition.cnn",
        "description": "face_recognition.cnn",
        "peekOfCode": "datagen = ImageDataGenerator(\n    rotation_range=20,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    fill_mode='nearest'\n)\n# # Define the CNN model architecture with additional hidden layers",
        "detail": "face_recognition.cnn",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "face_recognition.cnn",
        "description": "face_recognition.cnn",
        "peekOfCode": "model = Sequential([\n    Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)),\n    MaxPooling2D((2, 2)),\n    Conv2D(64, (3, 3), activation='relu'),\n    MaxPooling2D((2, 2)),\n    Flatten(),\n    Dense(128, activation='relu'),\n    Dropout(0.5),\n    Dense(num_classes, activation='softmax')\n])",
        "detail": "face_recognition.cnn",
        "documentation": {}
    },
    {
        "label": "checkpoint",
        "kind": 5,
        "importPath": "face_recognition.cnn",
        "description": "face_recognition.cnn",
        "peekOfCode": "checkpoint = ModelCheckpoint('face_recognition_model.h5', monitor='val_loss', save_best_only=True, mode='min')\n# Train the model\nmodel.fit(X_train, Y_train, epochs=10, batch_size=32, validation_split=0.2, callbacks=[checkpoint])\n# Save the trained model\nmodel.save('face_recognition_model.h5')\nfrom tensorflow.keras.models import load_model\nfrom sklearn.metrics import confusion_matrix, classification_report\n# Load the trained model\nmodel = load_model('face_recognition_model.h5')\n# Evaluate the model on the test set",
        "detail": "face_recognition.cnn",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "face_recognition.cnn",
        "description": "face_recognition.cnn",
        "peekOfCode": "model = load_model('face_recognition_model.h5')\n# Evaluate the model on the test set\nloss, accuracy = model.evaluate(X_test, Y_test)\nprint(\"Test Loss:\", loss)\nprint(\"Test Accuracy:\", accuracy)\n# Predict labels for the test set\nY_pred = model.predict(X_test)\npredicted_labels = np.argmax(Y_pred, axis=1)\n# Convert one-hot encoded labels to integer labels\ntrue_labels = np.argmax(Y_test, axis=1)",
        "detail": "face_recognition.cnn",
        "documentation": {}
    },
    {
        "label": "Y_pred",
        "kind": 5,
        "importPath": "face_recognition.cnn",
        "description": "face_recognition.cnn",
        "peekOfCode": "Y_pred = model.predict(X_test)\npredicted_labels = np.argmax(Y_pred, axis=1)\n# Convert one-hot encoded labels to integer labels\ntrue_labels = np.argmax(Y_test, axis=1)\n# Calculate accuracy manually\nmanual_accuracy = np.mean(predicted_labels == true_labels)\nprint(\"Manual Test Accuracy:\", manual_accuracy)\n# Calculate confusion matrix\nconf_matrix = confusion_matrix(true_labels, predicted_labels)\nprint(\"Confusion Matrix:\")",
        "detail": "face_recognition.cnn",
        "documentation": {}
    },
    {
        "label": "predicted_labels",
        "kind": 5,
        "importPath": "face_recognition.cnn",
        "description": "face_recognition.cnn",
        "peekOfCode": "predicted_labels = np.argmax(Y_pred, axis=1)\n# Convert one-hot encoded labels to integer labels\ntrue_labels = np.argmax(Y_test, axis=1)\n# Calculate accuracy manually\nmanual_accuracy = np.mean(predicted_labels == true_labels)\nprint(\"Manual Test Accuracy:\", manual_accuracy)\n# Calculate confusion matrix\nconf_matrix = confusion_matrix(true_labels, predicted_labels)\nprint(\"Confusion Matrix:\")\nprint(conf_matrix)",
        "detail": "face_recognition.cnn",
        "documentation": {}
    },
    {
        "label": "true_labels",
        "kind": 5,
        "importPath": "face_recognition.cnn",
        "description": "face_recognition.cnn",
        "peekOfCode": "true_labels = np.argmax(Y_test, axis=1)\n# Calculate accuracy manually\nmanual_accuracy = np.mean(predicted_labels == true_labels)\nprint(\"Manual Test Accuracy:\", manual_accuracy)\n# Calculate confusion matrix\nconf_matrix = confusion_matrix(true_labels, predicted_labels)\nprint(\"Confusion Matrix:\")\nprint(conf_matrix)\n# Calculate classification report\nclass_report = classification_report(true_labels, predicted_labels)",
        "detail": "face_recognition.cnn",
        "documentation": {}
    },
    {
        "label": "manual_accuracy",
        "kind": 5,
        "importPath": "face_recognition.cnn",
        "description": "face_recognition.cnn",
        "peekOfCode": "manual_accuracy = np.mean(predicted_labels == true_labels)\nprint(\"Manual Test Accuracy:\", manual_accuracy)\n# Calculate confusion matrix\nconf_matrix = confusion_matrix(true_labels, predicted_labels)\nprint(\"Confusion Matrix:\")\nprint(conf_matrix)\n# Calculate classification report\nclass_report = classification_report(true_labels, predicted_labels)\nprint(\"Classification Report:\")\nprint(class_report)",
        "detail": "face_recognition.cnn",
        "documentation": {}
    },
    {
        "label": "conf_matrix",
        "kind": 5,
        "importPath": "face_recognition.cnn",
        "description": "face_recognition.cnn",
        "peekOfCode": "conf_matrix = confusion_matrix(true_labels, predicted_labels)\nprint(\"Confusion Matrix:\")\nprint(conf_matrix)\n# Calculate classification report\nclass_report = classification_report(true_labels, predicted_labels)\nprint(\"Classification Report:\")\nprint(class_report)",
        "detail": "face_recognition.cnn",
        "documentation": {}
    },
    {
        "label": "class_report",
        "kind": 5,
        "importPath": "face_recognition.cnn",
        "description": "face_recognition.cnn",
        "peekOfCode": "class_report = classification_report(true_labels, predicted_labels)\nprint(\"Classification Report:\")\nprint(class_report)",
        "detail": "face_recognition.cnn",
        "documentation": {}
    },
    {
        "label": "create_label_map",
        "kind": 2,
        "importPath": "face_recognition.cnn_rec",
        "description": "face_recognition.cnn_rec",
        "peekOfCode": "def create_label_map(directory_path):\n    label_map = {}  # Mapping from label (person) to directory name\n    # Get the list of subdirectories in the given directory\n    subdirectories = [name for name in os.listdir(directory_path) if os.path.isdir(os.path.join(directory_path, name))]\n    # Assign each subdirectory name to a label\n    for label_id, directory_name in enumerate(subdirectories):\n        label_map[label_id] = directory_name\n    return label_map\n# Define the directory containing the training data\ntrain_dir = 'images/train'",
        "detail": "face_recognition.cnn_rec",
        "documentation": {}
    },
    {
        "label": "recognize_faces",
        "kind": 2,
        "importPath": "face_recognition.cnn_rec",
        "description": "face_recognition.cnn_rec",
        "peekOfCode": "def recognize_faces(image_path):\n    # Load the image\n    image = cv2.imread(image_path)\n    # Preprocess the image (resize and normalize)\n    image = cv2.resize(image, (64, 64))\n    image = image / 255.0\n    image = np.expand_dims(image, axis=0)  # Add batch dimension\n    # Perform prediction\n    predictions = model.predict(image)\n    # Get the predicted label (person) and confidence",
        "detail": "face_recognition.cnn_rec",
        "documentation": {}
    },
    {
        "label": "predict",
        "kind": 2,
        "importPath": "face_recognition.cnn_rec",
        "description": "face_recognition.cnn_rec",
        "peekOfCode": "def predict():\n   return recognize_faces(\"1.jpg\")\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "face_recognition.cnn_rec",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "face_recognition.cnn_rec",
        "description": "face_recognition.cnn_rec",
        "peekOfCode": "model = load_model('face_recognition_model.h5')\n# Function to create a label map with the names of subdirectories in the given directory\ndef create_label_map(directory_path):\n    label_map = {}  # Mapping from label (person) to directory name\n    # Get the list of subdirectories in the given directory\n    subdirectories = [name for name in os.listdir(directory_path) if os.path.isdir(os.path.join(directory_path, name))]\n    # Assign each subdirectory name to a label\n    for label_id, directory_name in enumerate(subdirectories):\n        label_map[label_id] = directory_name\n    return label_map",
        "detail": "face_recognition.cnn_rec",
        "documentation": {}
    },
    {
        "label": "train_dir",
        "kind": 5,
        "importPath": "face_recognition.cnn_rec",
        "description": "face_recognition.cnn_rec",
        "peekOfCode": "train_dir = 'images/train'\n# Create the label map\nlabel_map = create_label_map(train_dir)\n# Define the confidence threshold for known persons\nknown_threshold = 0.7  # Adjust this threshold as needed\n# Function to recognize faces in an image\ndef recognize_faces(image_path):\n    # Load the image\n    image = cv2.imread(image_path)\n    # Preprocess the image (resize and normalize)",
        "detail": "face_recognition.cnn_rec",
        "documentation": {}
    },
    {
        "label": "label_map",
        "kind": 5,
        "importPath": "face_recognition.cnn_rec",
        "description": "face_recognition.cnn_rec",
        "peekOfCode": "label_map = create_label_map(train_dir)\n# Define the confidence threshold for known persons\nknown_threshold = 0.7  # Adjust this threshold as needed\n# Function to recognize faces in an image\ndef recognize_faces(image_path):\n    # Load the image\n    image = cv2.imread(image_path)\n    # Preprocess the image (resize and normalize)\n    image = cv2.resize(image, (64, 64))\n    image = image / 255.0",
        "detail": "face_recognition.cnn_rec",
        "documentation": {}
    },
    {
        "label": "known_threshold",
        "kind": 5,
        "importPath": "face_recognition.cnn_rec",
        "description": "face_recognition.cnn_rec",
        "peekOfCode": "known_threshold = 0.7  # Adjust this threshold as needed\n# Function to recognize faces in an image\ndef recognize_faces(image_path):\n    # Load the image\n    image = cv2.imread(image_path)\n    # Preprocess the image (resize and normalize)\n    image = cv2.resize(image, (64, 64))\n    image = image / 255.0\n    image = np.expand_dims(image, axis=0)  # Add batch dimension\n    # Perform prediction",
        "detail": "face_recognition.cnn_rec",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "face_recognition.cnn_rec",
        "description": "face_recognition.cnn_rec",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/predict', methods=[\"POST\",\"GET\"])\ndef predict():\n   return recognize_faces(\"1.jpg\")\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "face_recognition.cnn_rec",
        "documentation": {}
    },
    {
        "label": "video",
        "kind": 5,
        "importPath": "face_recognition.data_collection",
        "description": "face_recognition.data_collection",
        "peekOfCode": "video = cv2.VideoCapture(0)\nfacedetect = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')\ncount = 0\nnameID = str(input(\"Enter your name: \")).lower()\npath = 'images/train/' + nameID\nvalidation_data_dir = 'images/test/' + nameID  # New directory for validation data\nisExist = os.path.exists(path)\nisValidationExist = os.path.exists(validation_data_dir)\nif isExist or isValidationExist:\n    print(\"Name already taken\")",
        "detail": "face_recognition.data_collection",
        "documentation": {}
    },
    {
        "label": "facedetect",
        "kind": 5,
        "importPath": "face_recognition.data_collection",
        "description": "face_recognition.data_collection",
        "peekOfCode": "facedetect = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')\ncount = 0\nnameID = str(input(\"Enter your name: \")).lower()\npath = 'images/train/' + nameID\nvalidation_data_dir = 'images/test/' + nameID  # New directory for validation data\nisExist = os.path.exists(path)\nisValidationExist = os.path.exists(validation_data_dir)\nif isExist or isValidationExist:\n    print(\"Name already taken\")\n    nameID = str(input(\"Enter your name again: \"))",
        "detail": "face_recognition.data_collection",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "face_recognition.data_collection",
        "description": "face_recognition.data_collection",
        "peekOfCode": "count = 0\nnameID = str(input(\"Enter your name: \")).lower()\npath = 'images/train/' + nameID\nvalidation_data_dir = 'images/test/' + nameID  # New directory for validation data\nisExist = os.path.exists(path)\nisValidationExist = os.path.exists(validation_data_dir)\nif isExist or isValidationExist:\n    print(\"Name already taken\")\n    nameID = str(input(\"Enter your name again: \"))\nelse:",
        "detail": "face_recognition.data_collection",
        "documentation": {}
    },
    {
        "label": "nameID",
        "kind": 5,
        "importPath": "face_recognition.data_collection",
        "description": "face_recognition.data_collection",
        "peekOfCode": "nameID = str(input(\"Enter your name: \")).lower()\npath = 'images/train/' + nameID\nvalidation_data_dir = 'images/test/' + nameID  # New directory for validation data\nisExist = os.path.exists(path)\nisValidationExist = os.path.exists(validation_data_dir)\nif isExist or isValidationExist:\n    print(\"Name already taken\")\n    nameID = str(input(\"Enter your name again: \"))\nelse:\n    os.makedirs(path)",
        "detail": "face_recognition.data_collection",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "face_recognition.data_collection",
        "description": "face_recognition.data_collection",
        "peekOfCode": "path = 'images/train/' + nameID\nvalidation_data_dir = 'images/test/' + nameID  # New directory for validation data\nisExist = os.path.exists(path)\nisValidationExist = os.path.exists(validation_data_dir)\nif isExist or isValidationExist:\n    print(\"Name already taken\")\n    nameID = str(input(\"Enter your name again: \"))\nelse:\n    os.makedirs(path)\n    os.makedirs(validation_data_dir)  # Create the validation data directory",
        "detail": "face_recognition.data_collection",
        "documentation": {}
    },
    {
        "label": "validation_data_dir",
        "kind": 5,
        "importPath": "face_recognition.data_collection",
        "description": "face_recognition.data_collection",
        "peekOfCode": "validation_data_dir = 'images/test/' + nameID  # New directory for validation data\nisExist = os.path.exists(path)\nisValidationExist = os.path.exists(validation_data_dir)\nif isExist or isValidationExist:\n    print(\"Name already taken\")\n    nameID = str(input(\"Enter your name again: \"))\nelse:\n    os.makedirs(path)\n    os.makedirs(validation_data_dir)  # Create the validation data directory\nwhile True:",
        "detail": "face_recognition.data_collection",
        "documentation": {}
    },
    {
        "label": "isExist",
        "kind": 5,
        "importPath": "face_recognition.data_collection",
        "description": "face_recognition.data_collection",
        "peekOfCode": "isExist = os.path.exists(path)\nisValidationExist = os.path.exists(validation_data_dir)\nif isExist or isValidationExist:\n    print(\"Name already taken\")\n    nameID = str(input(\"Enter your name again: \"))\nelse:\n    os.makedirs(path)\n    os.makedirs(validation_data_dir)  # Create the validation data directory\nwhile True:\n    ret, frame = video.read()",
        "detail": "face_recognition.data_collection",
        "documentation": {}
    },
    {
        "label": "isValidationExist",
        "kind": 5,
        "importPath": "face_recognition.data_collection",
        "description": "face_recognition.data_collection",
        "peekOfCode": "isValidationExist = os.path.exists(validation_data_dir)\nif isExist or isValidationExist:\n    print(\"Name already taken\")\n    nameID = str(input(\"Enter your name again: \"))\nelse:\n    os.makedirs(path)\n    os.makedirs(validation_data_dir)  # Create the validation data directory\nwhile True:\n    ret, frame = video.read()\n    if not ret:",
        "detail": "face_recognition.data_collection",
        "documentation": {}
    },
    {
        "label": "load_data_from_directory",
        "kind": 2,
        "importPath": "cnn",
        "description": "cnn",
        "peekOfCode": "def load_data_from_directory(directory):\n    images = []\n    labels = []\n    label_map = {}  # Mapping from label (person) to integer ID\n    label_id = 0\n    for label in os.listdir(directory):\n        label_path = os.path.join(directory, label)\n        if os.path.isdir(label_path):\n            label_map[label] = label_id\n            for image_file in os.listdir(label_path):",
        "detail": "cnn",
        "documentation": {}
    },
    {
        "label": "train_dir",
        "kind": 5,
        "importPath": "cnn",
        "description": "cnn",
        "peekOfCode": "train_dir = 'images/train'\ntest_dir = 'images/test'\n# Function to load images and labels from a directory\ndef load_data_from_directory(directory):\n    images = []\n    labels = []\n    label_map = {}  # Mapping from label (person) to integer ID\n    label_id = 0\n    for label in os.listdir(directory):\n        label_path = os.path.join(directory, label)",
        "detail": "cnn",
        "documentation": {}
    },
    {
        "label": "test_dir",
        "kind": 5,
        "importPath": "cnn",
        "description": "cnn",
        "peekOfCode": "test_dir = 'images/test'\n# Function to load images and labels from a directory\ndef load_data_from_directory(directory):\n    images = []\n    labels = []\n    label_map = {}  # Mapping from label (person) to integer ID\n    label_id = 0\n    for label in os.listdir(directory):\n        label_path = os.path.join(directory, label)\n        if os.path.isdir(label_path):",
        "detail": "cnn",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "cnn",
        "description": "cnn",
        "peekOfCode": "X_train = X_train / 255.0\nX_test = X_test / 255.0\n# Convert labels to one-hot encoding\nnum_classes = len(label_map)\nY_train = to_categorical(Y_train, num_classes=num_classes)\nY_test = to_categorical(Y_test, num_classes=num_classes)\n# Data augmentation\ndatagen = ImageDataGenerator(\n    rotation_range=20,\n    width_shift_range=0.1,",
        "detail": "cnn",
        "documentation": {}
    },
    {
        "label": "X_test",
        "kind": 5,
        "importPath": "cnn",
        "description": "cnn",
        "peekOfCode": "X_test = X_test / 255.0\n# Convert labels to one-hot encoding\nnum_classes = len(label_map)\nY_train = to_categorical(Y_train, num_classes=num_classes)\nY_test = to_categorical(Y_test, num_classes=num_classes)\n# Data augmentation\ndatagen = ImageDataGenerator(\n    rotation_range=20,\n    width_shift_range=0.1,\n    height_shift_range=0.1,",
        "detail": "cnn",
        "documentation": {}
    },
    {
        "label": "num_classes",
        "kind": 5,
        "importPath": "cnn",
        "description": "cnn",
        "peekOfCode": "num_classes = len(label_map)\nY_train = to_categorical(Y_train, num_classes=num_classes)\nY_test = to_categorical(Y_test, num_classes=num_classes)\n# Data augmentation\ndatagen = ImageDataGenerator(\n    rotation_range=20,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    shear_range=0.2,\n    zoom_range=0.2,",
        "detail": "cnn",
        "documentation": {}
    },
    {
        "label": "Y_train",
        "kind": 5,
        "importPath": "cnn",
        "description": "cnn",
        "peekOfCode": "Y_train = to_categorical(Y_train, num_classes=num_classes)\nY_test = to_categorical(Y_test, num_classes=num_classes)\n# Data augmentation\ndatagen = ImageDataGenerator(\n    rotation_range=20,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,",
        "detail": "cnn",
        "documentation": {}
    },
    {
        "label": "Y_test",
        "kind": 5,
        "importPath": "cnn",
        "description": "cnn",
        "peekOfCode": "Y_test = to_categorical(Y_test, num_classes=num_classes)\n# Data augmentation\ndatagen = ImageDataGenerator(\n    rotation_range=20,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    fill_mode='nearest'",
        "detail": "cnn",
        "documentation": {}
    },
    {
        "label": "datagen",
        "kind": 5,
        "importPath": "cnn",
        "description": "cnn",
        "peekOfCode": "datagen = ImageDataGenerator(\n    rotation_range=20,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    fill_mode='nearest'\n)\n# # Define the CNN model architecture with additional hidden layers",
        "detail": "cnn",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "cnn",
        "description": "cnn",
        "peekOfCode": "model = Sequential([\n    Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)),\n    MaxPooling2D((2, 2)),\n    Conv2D(64, (3, 3), activation='relu'),\n    MaxPooling2D((2, 2)),\n    Flatten(),\n    Dense(128, activation='relu'),\n    Dropout(0.5),\n    Dense(num_classes, activation='softmax')\n])",
        "detail": "cnn",
        "documentation": {}
    },
    {
        "label": "checkpoint",
        "kind": 5,
        "importPath": "cnn",
        "description": "cnn",
        "peekOfCode": "checkpoint = ModelCheckpoint('face_recognition_model.h5', monitor='val_loss', save_best_only=True, mode='min')\n# Train the model\nmodel.fit(X_train, Y_train, epochs=10, batch_size=32, validation_split=0.2, callbacks=[checkpoint])\n# Save the trained model\nmodel.save('face_recognition_model.h5')\nfrom tensorflow.keras.models import load_model\nfrom sklearn.metrics import confusion_matrix, classification_report\n# Load the trained model\nmodel = load_model('face_recognition_model.h5')\n# Evaluate the model on the test set",
        "detail": "cnn",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "cnn",
        "description": "cnn",
        "peekOfCode": "model = load_model('face_recognition_model.h5')\n# Evaluate the model on the test set\nloss, accuracy = model.evaluate(X_test, Y_test)\nprint(\"Test Loss:\", loss)\nprint(\"Test Accuracy:\", accuracy)\n# Predict labels for the test set\nY_pred = model.predict(X_test)\npredicted_labels = np.argmax(Y_pred, axis=1)\n# Convert one-hot encoded labels to integer labels\ntrue_labels = np.argmax(Y_test, axis=1)",
        "detail": "cnn",
        "documentation": {}
    },
    {
        "label": "Y_pred",
        "kind": 5,
        "importPath": "cnn",
        "description": "cnn",
        "peekOfCode": "Y_pred = model.predict(X_test)\npredicted_labels = np.argmax(Y_pred, axis=1)\n# Convert one-hot encoded labels to integer labels\ntrue_labels = np.argmax(Y_test, axis=1)\n# Calculate accuracy manually\nmanual_accuracy = np.mean(predicted_labels == true_labels)\nprint(\"Manual Test Accuracy:\", manual_accuracy)\n# Calculate confusion matrix\nconf_matrix = confusion_matrix(true_labels, predicted_labels)\nprint(\"Confusion Matrix:\")",
        "detail": "cnn",
        "documentation": {}
    },
    {
        "label": "predicted_labels",
        "kind": 5,
        "importPath": "cnn",
        "description": "cnn",
        "peekOfCode": "predicted_labels = np.argmax(Y_pred, axis=1)\n# Convert one-hot encoded labels to integer labels\ntrue_labels = np.argmax(Y_test, axis=1)\n# Calculate accuracy manually\nmanual_accuracy = np.mean(predicted_labels == true_labels)\nprint(\"Manual Test Accuracy:\", manual_accuracy)\n# Calculate confusion matrix\nconf_matrix = confusion_matrix(true_labels, predicted_labels)\nprint(\"Confusion Matrix:\")\nprint(conf_matrix)",
        "detail": "cnn",
        "documentation": {}
    },
    {
        "label": "true_labels",
        "kind": 5,
        "importPath": "cnn",
        "description": "cnn",
        "peekOfCode": "true_labels = np.argmax(Y_test, axis=1)\n# Calculate accuracy manually\nmanual_accuracy = np.mean(predicted_labels == true_labels)\nprint(\"Manual Test Accuracy:\", manual_accuracy)\n# Calculate confusion matrix\nconf_matrix = confusion_matrix(true_labels, predicted_labels)\nprint(\"Confusion Matrix:\")\nprint(conf_matrix)\n# Calculate classification report\nclass_report = classification_report(true_labels, predicted_labels)",
        "detail": "cnn",
        "documentation": {}
    },
    {
        "label": "manual_accuracy",
        "kind": 5,
        "importPath": "cnn",
        "description": "cnn",
        "peekOfCode": "manual_accuracy = np.mean(predicted_labels == true_labels)\nprint(\"Manual Test Accuracy:\", manual_accuracy)\n# Calculate confusion matrix\nconf_matrix = confusion_matrix(true_labels, predicted_labels)\nprint(\"Confusion Matrix:\")\nprint(conf_matrix)\n# Calculate classification report\nclass_report = classification_report(true_labels, predicted_labels)\nprint(\"Classification Report:\")\nprint(class_report)",
        "detail": "cnn",
        "documentation": {}
    },
    {
        "label": "conf_matrix",
        "kind": 5,
        "importPath": "cnn",
        "description": "cnn",
        "peekOfCode": "conf_matrix = confusion_matrix(true_labels, predicted_labels)\nprint(\"Confusion Matrix:\")\nprint(conf_matrix)\n# Calculate classification report\nclass_report = classification_report(true_labels, predicted_labels)\nprint(\"Classification Report:\")\nprint(class_report)",
        "detail": "cnn",
        "documentation": {}
    },
    {
        "label": "class_report",
        "kind": 5,
        "importPath": "cnn",
        "description": "cnn",
        "peekOfCode": "class_report = classification_report(true_labels, predicted_labels)\nprint(\"Classification Report:\")\nprint(class_report)",
        "detail": "cnn",
        "documentation": {}
    },
    {
        "label": "create_label_map",
        "kind": 2,
        "importPath": "cnn_rec",
        "description": "cnn_rec",
        "peekOfCode": "def create_label_map(directory_path):\n    label_map = {}  # Mapping from label (person) to directory name\n    # Get the list of subdirectories in the given directory\n    subdirectories = [name for name in os.listdir(directory_path) if os.path.isdir(os.path.join(directory_path, name))]\n    # Assign each subdirectory name to a label\n    for label_id, directory_name in enumerate(subdirectories):\n        label_map[label_id] = directory_name\n    return label_map\n# Define the directory containing the training data\ntrain_dir = 'images/train'",
        "detail": "cnn_rec",
        "documentation": {}
    },
    {
        "label": "recognize_faces",
        "kind": 2,
        "importPath": "cnn_rec",
        "description": "cnn_rec",
        "peekOfCode": "def recognize_faces(image):\n    # Load the image\n    image = cv2.imdecode(np.frombuffer(image.read(), np.uint8), cv2.IMREAD_COLOR)\n    # Preprocess the image (resize and normalize)\n    image = cv2.resize(image, (64, 64))\n    image = image / 255.0\n    image = np.expand_dims(image, axis=0)  # Add batch dimension\n    # Perform prediction\n    predictions = model.predict(image)\n    # Get the predicted label (person) and confidence",
        "detail": "cnn_rec",
        "documentation": {}
    },
    {
        "label": "predict",
        "kind": 2,
        "importPath": "cnn_rec",
        "description": "cnn_rec",
        "peekOfCode": "def predict():\n    if 'file' not in request.files:\n        return {\"error\": \"No file part in the request.\"}, 400\n    file = request.files['file']\n    if file.filename == '':\n        return {\"error\": \"No file selected.\"}, 400\n    return recognize_faces(file)\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "cnn_rec",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "cnn_rec",
        "description": "cnn_rec",
        "peekOfCode": "model = load_model('face_recognition_model.h5')\n# Function to create a label map with the names of subdirectories in the given directory\ndef create_label_map(directory_path):\n    label_map = {}  # Mapping from label (person) to directory name\n    # Get the list of subdirectories in the given directory\n    subdirectories = [name for name in os.listdir(directory_path) if os.path.isdir(os.path.join(directory_path, name))]\n    # Assign each subdirectory name to a label\n    for label_id, directory_name in enumerate(subdirectories):\n        label_map[label_id] = directory_name\n    return label_map",
        "detail": "cnn_rec",
        "documentation": {}
    },
    {
        "label": "train_dir",
        "kind": 5,
        "importPath": "cnn_rec",
        "description": "cnn_rec",
        "peekOfCode": "train_dir = 'images/train'\n# Create the label map\nlabel_map = create_label_map(train_dir)\n# Define the confidence threshold for known persons\nknown_threshold = 0.7  # Adjust this threshold as needed\n# Function to recognize faces in an image\ndef recognize_faces(image):\n    # Load the image\n    image = cv2.imdecode(np.frombuffer(image.read(), np.uint8), cv2.IMREAD_COLOR)\n    # Preprocess the image (resize and normalize)",
        "detail": "cnn_rec",
        "documentation": {}
    },
    {
        "label": "label_map",
        "kind": 5,
        "importPath": "cnn_rec",
        "description": "cnn_rec",
        "peekOfCode": "label_map = create_label_map(train_dir)\n# Define the confidence threshold for known persons\nknown_threshold = 0.7  # Adjust this threshold as needed\n# Function to recognize faces in an image\ndef recognize_faces(image):\n    # Load the image\n    image = cv2.imdecode(np.frombuffer(image.read(), np.uint8), cv2.IMREAD_COLOR)\n    # Preprocess the image (resize and normalize)\n    image = cv2.resize(image, (64, 64))\n    image = image / 255.0",
        "detail": "cnn_rec",
        "documentation": {}
    },
    {
        "label": "known_threshold",
        "kind": 5,
        "importPath": "cnn_rec",
        "description": "cnn_rec",
        "peekOfCode": "known_threshold = 0.7  # Adjust this threshold as needed\n# Function to recognize faces in an image\ndef recognize_faces(image):\n    # Load the image\n    image = cv2.imdecode(np.frombuffer(image.read(), np.uint8), cv2.IMREAD_COLOR)\n    # Preprocess the image (resize and normalize)\n    image = cv2.resize(image, (64, 64))\n    image = image / 255.0\n    image = np.expand_dims(image, axis=0)  # Add batch dimension\n    # Perform prediction",
        "detail": "cnn_rec",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "cnn_rec",
        "description": "cnn_rec",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/predict', methods=[\"POST\"])\ndef predict():\n    if 'file' not in request.files:\n        return {\"error\": \"No file part in the request.\"}, 400\n    file = request.files['file']\n    if file.filename == '':\n        return {\"error\": \"No file selected.\"}, 400\n    return recognize_faces(file)\nif __name__ == \"__main__\":",
        "detail": "cnn_rec",
        "documentation": {}
    },
    {
        "label": "video",
        "kind": 5,
        "importPath": "data_collection",
        "description": "data_collection",
        "peekOfCode": "video = cv2.VideoCapture(0)\nfacedetect = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')\ncount = 0\nnameID = str(input(\"Enter your name: \")).lower()\npath = 'images/train/' + nameID\nvalidation_data_dir = 'images/test/' + nameID  # New directory for validation data\nisExist = os.path.exists(path)\nisValidationExist = os.path.exists(validation_data_dir)\nif isExist or isValidationExist:\n    print(\"Name already taken\")",
        "detail": "data_collection",
        "documentation": {}
    },
    {
        "label": "facedetect",
        "kind": 5,
        "importPath": "data_collection",
        "description": "data_collection",
        "peekOfCode": "facedetect = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')\ncount = 0\nnameID = str(input(\"Enter your name: \")).lower()\npath = 'images/train/' + nameID\nvalidation_data_dir = 'images/test/' + nameID  # New directory for validation data\nisExist = os.path.exists(path)\nisValidationExist = os.path.exists(validation_data_dir)\nif isExist or isValidationExist:\n    print(\"Name already taken\")\n    nameID = str(input(\"Enter your name again: \"))",
        "detail": "data_collection",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "data_collection",
        "description": "data_collection",
        "peekOfCode": "count = 0\nnameID = str(input(\"Enter your name: \")).lower()\npath = 'images/train/' + nameID\nvalidation_data_dir = 'images/test/' + nameID  # New directory for validation data\nisExist = os.path.exists(path)\nisValidationExist = os.path.exists(validation_data_dir)\nif isExist or isValidationExist:\n    print(\"Name already taken\")\n    nameID = str(input(\"Enter your name again: \"))\nelse:",
        "detail": "data_collection",
        "documentation": {}
    },
    {
        "label": "nameID",
        "kind": 5,
        "importPath": "data_collection",
        "description": "data_collection",
        "peekOfCode": "nameID = str(input(\"Enter your name: \")).lower()\npath = 'images/train/' + nameID\nvalidation_data_dir = 'images/test/' + nameID  # New directory for validation data\nisExist = os.path.exists(path)\nisValidationExist = os.path.exists(validation_data_dir)\nif isExist or isValidationExist:\n    print(\"Name already taken\")\n    nameID = str(input(\"Enter your name again: \"))\nelse:\n    os.makedirs(path)",
        "detail": "data_collection",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "data_collection",
        "description": "data_collection",
        "peekOfCode": "path = 'images/train/' + nameID\nvalidation_data_dir = 'images/test/' + nameID  # New directory for validation data\nisExist = os.path.exists(path)\nisValidationExist = os.path.exists(validation_data_dir)\nif isExist or isValidationExist:\n    print(\"Name already taken\")\n    nameID = str(input(\"Enter your name again: \"))\nelse:\n    os.makedirs(path)\n    os.makedirs(validation_data_dir)  # Create the validation data directory",
        "detail": "data_collection",
        "documentation": {}
    },
    {
        "label": "validation_data_dir",
        "kind": 5,
        "importPath": "data_collection",
        "description": "data_collection",
        "peekOfCode": "validation_data_dir = 'images/test/' + nameID  # New directory for validation data\nisExist = os.path.exists(path)\nisValidationExist = os.path.exists(validation_data_dir)\nif isExist or isValidationExist:\n    print(\"Name already taken\")\n    nameID = str(input(\"Enter your name again: \"))\nelse:\n    os.makedirs(path)\n    os.makedirs(validation_data_dir)  # Create the validation data directory\nwhile True:",
        "detail": "data_collection",
        "documentation": {}
    },
    {
        "label": "isExist",
        "kind": 5,
        "importPath": "data_collection",
        "description": "data_collection",
        "peekOfCode": "isExist = os.path.exists(path)\nisValidationExist = os.path.exists(validation_data_dir)\nif isExist or isValidationExist:\n    print(\"Name already taken\")\n    nameID = str(input(\"Enter your name again: \"))\nelse:\n    os.makedirs(path)\n    os.makedirs(validation_data_dir)  # Create the validation data directory\nwhile True:\n    ret, frame = video.read()",
        "detail": "data_collection",
        "documentation": {}
    },
    {
        "label": "isValidationExist",
        "kind": 5,
        "importPath": "data_collection",
        "description": "data_collection",
        "peekOfCode": "isValidationExist = os.path.exists(validation_data_dir)\nif isExist or isValidationExist:\n    print(\"Name already taken\")\n    nameID = str(input(\"Enter your name again: \"))\nelse:\n    os.makedirs(path)\n    os.makedirs(validation_data_dir)  # Create the validation data directory\nwhile True:\n    ret, frame = video.read()\n    if not ret:",
        "detail": "data_collection",
        "documentation": {}
    }
]